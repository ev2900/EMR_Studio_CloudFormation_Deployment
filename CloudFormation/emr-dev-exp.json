{
  "Description":"CloudFormation template to create the EMR Developer Experience workshop environment",

  "Parameters": {
    "CreateEMRRoles": {
      "Description": "Create the default EMR Roles - required if you've never used EMR before in your account.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "CreateEMRCluster": {
      "Description": "Create an EMR Cluster that EMR Studio can attach to. This will reduce the workshop lab execution time",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    }
  },

  "Conditions": {
    "ShouldCreateEMRRoles": {
      "Fn::Equals": ["true", { "Ref": "CreateEMRRoles" }]
    },
    "ShouldCreateEMRCluster": {
      "Fn::Equals": ["true", { "Ref": "CreateEMRCluster" }]
    }
  },

  "Mappings":{
    "SubnetConfig":{
      "VPC":{
        "CIDR":"10.0.0.0/16"
      },
      "Public1":{
        "CIDR":"10.0.10.0/24"
      },
      "Public2":{
        "CIDR":"10.0.11.0/24"
      },
      "Private1":{
        "CIDR":"10.0.20.0/24"
      },
      "Private2":{
        "CIDR":"10.0.21.0/24"
      }
    }
  },
  "Resources":{
    "EMRDevExpVPC":{
      "Type":"AWS::EC2::VPC",
      "Properties":{
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "InstanceTenancy":"default",
        "EnableDnsSupport":"true",
        "EnableDnsHostnames":"true",
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMR-Dev-Exp-VPC"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "InternetGateway":{
      "Type":"AWS::EC2::InternetGateway",
      "Properties":{
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMR-Dev-Exp-IG"
          }
        ]
      }
    },
    "VPCGatewayAttachment":{
      "Type":"AWS::EC2::VPCGatewayAttachment",
      "Properties":{
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "InternetGatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicSubnet1":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public1",
            "CIDR"
          ]
        },
        "MapPublicIpOnLaunch":"true",
        "AvailabilityZone":{
          "Fn::Select":[
            0,
            {
              "Fn::GetAZs":{
                "Ref":"AWS::Region"
              }
            }
          ]
        },
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMR-Dev-Exp-PublicSubnet1"
          },
          {
            "Key":"kubernetes.io/role/elb",
            "Value":"1"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "PublicSubnet2":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public2",
            "CIDR"
          ]
        },
        "MapPublicIpOnLaunch":"true",
        "AvailabilityZone":{
          "Fn::Select":[
            1,
            {
              "Fn::GetAZs":{
                "Ref":"AWS::Region"
              }
            }
          ]
        },
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMR-Dev-Exp-PublicSubnet2"
          },
          {
            "Key":"kubernetes.io/role/elb",
            "Value":"1"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "PrivateSubnet1":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Private1",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::Select":[
            0,
            {
              "Fn::GetAZs":{
                "Ref":"AWS::Region"
              }
            }
          ]
        },
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMR-Dev-Exp-PrivateSubnet1"
          },
          {
            "Key":"kubernetes.io/role/internal-elb",
            "Value":"1"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "PrivateSubnet2":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Private2",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::Select":[
            1,
            {
              "Fn::GetAZs":{
                "Ref":"AWS::Region"
              }
            }
          ]
        },
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMR-Dev-Exp-PrivateSubnet2"
          },
          {
            "Key":"kubernetes.io/role/internal-elb",
            "Value":"1"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "NATGateway1EIP":{
      "Type":"AWS::EC2::EIP",
      "DependsOn":"VPCGatewayAttachment",
      "Properties":{
        "Domain":"vpc"
      }
    },
    "NATGateway2EIP":{
      "Type":"AWS::EC2::EIP",
      "DependsOn":"VPCGatewayAttachment",
      "Properties":{
        "Domain":"vpc"
      }
    },
    "NATGateway1":{
      "Type":"AWS::EC2::NatGateway",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet1"
        },
        "AllocationId":{
          "Fn::GetAtt":[
            "NATGateway1EIP",
            "AllocationId"
          ]
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-NAT-Gateway1"
          }
        ]
      }
    },
    "NATGateway2":{
      "Type":"AWS::EC2::NatGateway",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet2"
        },
        "AllocationId":{
          "Fn::GetAtt":[
            "NATGateway2EIP",
            "AllocationId"
          ]
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-NAT-Gateway2"
          }
        ]
      }
    },
    "PublicRouteTable":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-PublicRouteTable"
          }
        ]
      }
    },
    "DefaultPublicRoute":{
      "Type":"AWS::EC2::Route",
      "DependsOn":"VPCGatewayAttachment",
      "Properties":{
        "DestinationCidrBlock":"0.0.0.0/0",
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        },
        "GatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        },
        "SubnetId":{
          "Ref":"PublicSubnet1"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        },
        "SubnetId":{
          "Ref":"PublicSubnet2"
        }
      }
    },
    "PrivateRouteTable1":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-PrivateRouteTable1"
          }
        ]
      }
    },
    "DefaultPrivateRoute1":{
      "Type":"AWS::EC2::Route",
      "Properties":{
        "DestinationCidrBlock":"0.0.0.0/0",
        "RouteTableId":{
          "Ref":"PrivateRouteTable1"
        },
        "NatGatewayId":{
          "Ref":"NATGateway1"
        }
      }
    },
    "PrivateSubnet1RouteTableAssociation":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "RouteTableId":{
          "Ref":"PrivateRouteTable1"
        },
        "SubnetId":{
          "Ref":"PrivateSubnet1"
        }
      }
    },
    "PrivateRouteTable2":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-PrivateRouteTable2"
          }
        ]
      }
    },
    "DefaultPrivateRoute2":{
      "Type":"AWS::EC2::Route",
      "Properties":{
        "DestinationCidrBlock":"0.0.0.0/0",
        "RouteTableId":{
          "Ref":"PrivateRouteTable2"
        },
        "NatGatewayId":{
          "Ref":"NATGateway2"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "RouteTableId":{
          "Ref":"PrivateRouteTable2"
        },
        "SubnetId":{
          "Ref":"PrivateSubnet2"
        }
      }
    },
    "S3Endpoint":{
      "Type":"AWS::EC2::VPCEndpoint",
      "Properties":{
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":"*",
              "Principal":"*",
              "Resource":"*"
            }
          ]
        },
        "RouteTableIds":[
          {
            "Ref":"PrivateRouteTable1"
          },
          {
            "Ref":"PrivateRouteTable2"
          },
          {
            "Ref":"PublicRouteTable"
          }
        ],
        "ServiceName":{
          "Fn::Sub":"com.amazonaws.${AWS::Region}.s3"
        },
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        }
      }
    },
    "EMRDevExpSecGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupName":"EMRDevExp-Default-SG",
        "GroupDescription":"Security Group for EMRDevExp-Default-SG",
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"-1",
            "CidrIp":{
              "Fn::FindInMap":[
                "SubnetConfig",
                "VPC",
                "CIDR"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-Default-SG"
          }
        ]
      }
    },
    "VPCDefaultSecurityGroupIngress":{
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "GroupId":{
          "Fn::GetAtt":[
            "EMRDevExpVPC",
            "DefaultSecurityGroup"
          ]
        },
        "IpProtocol":"-1",
        "CidrIp":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        }
      }
    },
    "EMRDevExpBucket":{
      "Type":"AWS::S3::Bucket",
      "Properties":{
        "BucketName":{
          "Fn::Join":[
            "-",
            [
              "emr-dev-exp",
              {
                "Ref":"AWS::AccountId"
              }
            ]
          ]
        }
      }
    },

    "EMRAdminUser":{
      "Type":"AWS::IAM::User",
      "Properties":{
        "Path":"/",
        "LoginProfile":{
          "Password":{
            "Fn::Sub":"{{resolve:secretsmanager:${TestUserPassword}::password}}"
          },
          "PasswordResetRequired":false
        },
        "Policies":[
          {
            "PolicyName":"EMRDevExp-Studio-Admin-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Resource":"arn:aws:elasticmapreduce:*:*:studio/*",
                  "Action":[
                    "elasticmapreduce:CreateStudio",
                    "elasticmapreduce:DescribeStudio",
                    "elasticmapreduce:DeleteStudio",
                    "elasticmapreduce:CreateStudioSessionMapping",
                    "elasticmapreduce:GetStudioSessionMapping",
                    "elasticmapreduce:UpdateStudioSessionMapping",
                    "elasticmapreduce:DeleteStudioSessionMapping"
                  ]
                },
                {
                  "Effect":"Allow",
                  "Resource":"*",
                  "Action":[
                    "elasticmapreduce:ListStudios",
                    "elasticmapreduce:ListStudioSessionMappings"
                  ]
                },
                {
                  "Effect":"Allow",
                  "Resource":[
                    {
                      "Fn::GetAtt":[
                        "EMRStudioServiceRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt":[
                        "EMRStudioUserRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt":[
                        "StudioSAMLRoleAuth0",
                        "Arn"
                      ]
                    }
                  ],
                  "Action":"iam:PassRole"
                },
                {
                  "Effect":"Allow",
                  "Resource":"*",
                  "Action":[
                    "sso:CreateManagedApplicationInstance",
                    "sso:GetManagedApplicationInstance",
                    "sso:DeleteManagedApplicationInstance",
                    "sso:AssociateProfile",
                    "sso:DisassociateProfile",
                    "sso:GetProfile",
                    "sso:ListDirectoryAssociations",
                    "sso:ListProfiles",
                    "sso-directory:SearchUsers",
                    "sso-directory:SearchGroups",
                    "sso-directory:DescribeUser",
                    "sso-directory:DescribeGroup"
                  ]
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/PowerUserAccess",
          "arn:aws:iam::aws:policy/AWSCloud9User",
          "arn:aws:iam::aws:policy/IAMReadOnlyAccess",
          "arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
        ],
        "UserName":"emr-admin"
      }
    },
    "StudioSAMLRoleAuth0":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/PowerUserAccess",
          "arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
        ],
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Federated":{
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref":"AWS::AccountId"
                      },
                      ":saml-provider/StudioAuth0SAMLProvider"
                    ]
                  ]
                }
              },
              "Action":"sts:AssumeRoleWithSAML",
              "Condition":{
                "StringEquals":{
                  "SAML:aud":"https://signin.aws.amazon.com/saml"
                }
              }
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"StudioSAMLRoleAuth0-AssumeRolePolicy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Resource":[
                    {
                      "Fn::GetAtt":[
                        "EMRStudioServiceRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt":[
                        "EMRClusterServiceRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt":[
                        "EMREC2RestrictedRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt":[
                        "EMRStudioServiceRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref":"AWS::AccountId"
                          },
                          ":role/EMR_DefaultRole"
                        ]
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref":"AWS::AccountId"
                          },
                          ":role/EMR_EC2_DefaultRole"
                        ]
                      ]
                    }
                  ],
                  "Action":"iam:PassRole"
                }
              ]
            }
          }
        ],
        "RoleName":"Studio-SAML-Role-Auth0"
      }
    },
    "SCLaunchRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-SCLaunchRole",
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "elasticmapreduce.amazonaws.com",
                  "servicecatalog.amazonaws.com"
                ]
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"SC-Launch-Role-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "catalog-user:*",
                    "cloudformation:CreateStack",
                    "cloudformation:DeleteStack",
                    "cloudformation:DescribeStackEvents",
                    "cloudformation:DescribeStacks",
                    "cloudformation:GetTemplateSummary",
                    "cloudformation:SetStackPolicy",
                    "cloudformation:ValidateTemplate",
                    "cloudformation:UpdateStack",
                    "s3:GetObject",
                    "elasticmapreduce:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          },
          {
            "PolicyName":"SC-Launch-Role-Limited-IAM-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "iam:PassRole"
                  ],
                  "Resource":[
                    {
                      "Fn::GetAtt":[
                        "EMREC2RestrictedRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt":[
                        "EMRClusterServiceRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref":"AWS::AccountId"
                          },
                          ":role/EMR_AutoScaling_DefaultRole"
                        ]
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref":"AWS::AccountId"
                          },
                          ":role/EMR_DefaultRole"
                        ]
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref":"AWS::AccountId"
                          },
                          ":role/EMR_EC2_DefaultRole"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "EMREC2RestrictedRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-EMR_EC2_Restricted_Role",
        "Path":"/",
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"EMRDevExp-EMR_EC2_Restricted_Role_Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":"s3:*",
                  "Resource":[
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"EMRDevExpBucket"
                          },
                          "/"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":"s3:*",
                  "Resource":[
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"EMRDevExpBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:ListBucket"
                  ],
                  "Resource":[
                    "arn:aws:s3:::us-west-2.elasticmapreduce",
                    "arn:aws:s3:::amazon-reviews-pds",
                    "arn:aws:s3:::aws-data-analytics-blog",
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"EMRDevExpBucket"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:GetObject"
                  ],
                  "Resource":[
                    "arn:aws:s3:::us-west-2.elasticmapreduce/*",
                    "arn:aws:s3:::amazon-reviews-pds/*",
                    "arn:aws:s3:::aws-data-analytics-workshops/emr-dev-exp-workshop/*",
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"EMRDevExpBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudwatch:*",
                    "dynamodb:*",
                    "ec2:Describe*",
                    "elasticmapreduce:Describe*",
                    "elasticmapreduce:ListBootstrapActions",
                    "elasticmapreduce:ListClusters",
                    "elasticmapreduce:ListInstanceGroups",
                    "elasticmapreduce:ListInstances",
                    "elasticmapreduce:ListSteps",
                    "kinesis:*",
                    "rds:Describe*",
                    "sdb:*",
                    "sns:*",
                    "sqs:*",
                    "glue:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "EMREC2RestrictedRoleInstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EMREC2RestrictedRole"
          }
        ],
        "InstanceProfileName":"EMRDevExp-EMR_EC2_Restricted_Role"
      }
    },
    "EMRClusterServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-EMRClusterServiceRole",
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "elasticmapreduce.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
        ],
        "Path":"/"
      }
    },
    "EMREKSJobExecutionRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-EMREKSJobExecutionRole",
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "elasticmapreduce.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"EMRDevExp-EMREKSJobExecutionPolicy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "logs:PutLogEvents",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource":[
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "EMRDevPortfolio":{
      "Type":"AWS::ServiceCatalog::Portfolio",
      "Properties":{
        "Description":"A stack with a variety of pre-defined EMR clusters for developers.",
        "DisplayName":"EMR Studio Developers Stack",
        "ProviderName":{
          "Ref":"EMRAdminUser"
        }
      }
    },
    "Dev532Product":{
      "Type":"AWS::ServiceCatalog::CloudFormationProduct",
      "Properties":{
        "Description":"EMR cluster with 5.33.0 version",
        "Name":"EMR_5.33.0",
        "Owner":{
          "Ref":"EMRAdminUser"
        },
        "ProvisioningArtifactParameters":[
          {
            "Description":"EMR with Spark, Livy & Jupyter",
            "Info":{
              "LoadTemplateFromURL":{
                "Fn::Join":[
                  "",
                  [
                    "https://s3.amazonaws.com/",
                    {
                      "Ref":"EMRDevExpBucket"
                    },
                    "/emr-templates/emr-5.33.0.yaml"
                  ]
                ]
              }
            },
            "Name":"Default Revision",
            "DisableTemplateValidation":true
          }
        ]
      }
    },
    "Dev620Product":{
      "Type":"AWS::ServiceCatalog::CloudFormationProduct",
      "Properties":{
        "Description":"EMR cluster with 6.2.0 version",
        "Name":"EMR_6.2.0",
        "Owner":{
          "Ref":"EMRAdminUser"
        },
        "ProvisioningArtifactParameters":[
          {
            "Description":"EMR with Spark, Livy & Jupyter",
            "Info":{
              "LoadTemplateFromURL":{
                "Fn::Join":[
                  "",
                  [
                    "https://s3.amazonaws.com/",
                    {
                      "Ref":"EMRDevExpBucket"
                    },
                    "/emr-templates/emr-6.2.0.yaml"
                  ]
                ]
              }
            },
            "Name":"Default Revision",
            "DisableTemplateValidation":true
          }
        ]
      }
    },
    "Dev532ProductLaunchRole":{
      "Type":"AWS::ServiceCatalog::LaunchRoleConstraint",
      "DependsOn":[
        "Dev532ProductToPortfolio",
        "SCLaunchRole"
      ],
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "ProductId":{
          "Ref":"Dev532Product"
        },
        "RoleArn":{
          "Fn::GetAtt":[
            "SCLaunchRole",
            "Arn"
          ]
        }
      }
    },
    "Dev620ProductLaunchRole":{
      "Type":"AWS::ServiceCatalog::LaunchRoleConstraint",
      "DependsOn":[
        "Dev620ProductToPortfolio",
        "SCLaunchRole"
      ],
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "ProductId":{
          "Ref":"Dev620Product"
        },
        "RoleArn":{
          "Fn::GetAtt":[
            "SCLaunchRole",
            "Arn"
          ]
        }
      }
    },
    "Dev532ProductToPortfolio":{
      "Type":"AWS::ServiceCatalog::PortfolioProductAssociation",
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "ProductId":{
          "Ref":"Dev532Product"
        }
      }
    },
    "Dev620ProductToPortfolio":{
      "Type":"AWS::ServiceCatalog::PortfolioProductAssociation",
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "ProductId":{
          "Ref":"Dev620Product"
        }
      }
    },
    "EMRAdminToEMRDevPortfolio":{
      "Type":"AWS::ServiceCatalog::PortfolioPrincipalAssociation",
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "PrincipalARN":{
          "Fn::GetAtt":[
            "EMRAdminUser",
            "Arn"
          ]
        },
        "PrincipalType":"IAM"
      }
    },
    "EMRStudioUserRoleToEMRDevPortfolio":{
      "Type":"AWS::ServiceCatalog::PortfolioPrincipalAssociation",
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "PrincipalARN":{
          "Fn::GetAtt":[
            "EMRStudioUserRole",
            "Arn"
          ]
        },
        "PrincipalType":"IAM"
      }
    },
    "Auth0SAMLRoleToEMRDevPortfolio":{
      "Type":"AWS::ServiceCatalog::PortfolioPrincipalAssociation",
      "Properties":{
        "PortfolioId":{
          "Ref":"EMRDevPortfolio"
        },
        "PrincipalARN":{
          "Fn::GetAtt":[
            "StudioSAMLRoleAuth0",
            "Arn"
          ]
        },
        "PrincipalType":"IAM"
      }
    },
    "EMRStudioServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-EMRStudioServiceRole",
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "elasticmapreduce.amazonaws.com"
                ]
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"EMRDevExp-Studio-Service-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Sid":"AllowEMRReadOnlyActions",
                  "Effect":"Allow",
                  "Action":[
                    "elasticmapreduce:ListInstances",
                    "elasticmapreduce:DescribeCluster",
                    "elasticmapreduce:ListSteps"
                  ],
                  "Resource":"*"
                },
                {
                  "Sid":"AllowEC2ENIActionsWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateNetworkInterfacePermission",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource":[
                    "arn:aws:ec2:*:*:network-interface/*"
                  ],
                  "Condition":{
                    "StringEquals":{
                      "aws:ResourceTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Sid":"AllowEC2ENIAttributeAction",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:ModifyNetworkInterfaceAttribute"
                  ],
                  "Resource":[
                    "arn:aws:ec2:*:*:instance/*",
                    "arn:aws:ec2:*:*:network-interface/*",
                    "arn:aws:ec2:*:*:security-group/*"
                  ]
                },
                {
                  "Sid":"AllowEC2SecurityGroupActionsWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RevokeSecurityGroupIngress",
                    "ec2:DeleteNetworkInterfacePermission"
                  ],
                  "Resource":"*",
                  "Condition":{
                    "StringEquals":{
                      "aws:ResourceTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Sid":"AllowDefaultEC2SecurityGroupsCreationWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateSecurityGroup"
                  ],
                  "Resource":[
                    "arn:aws:ec2:*:*:security-group/*"
                  ],
                  "Condition":{
                    "StringEquals":{
                      "aws:RequestTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Sid":"AllowDefaultEC2SecurityGroupsCreationInVPCWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateSecurityGroup"
                  ],
                  "Resource":[
                    "arn:aws:ec2:*:*:vpc/*"
                  ],
                  "Condition":{
                    "StringEquals":{
                      "aws:ResourceTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Sid":"AllowAddingEMRTagsDuringDefaultSecurityGroupCreation",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateTags"
                  ],
                  "Resource":"arn:aws:ec2:*:*:security-group/*",
                  "Condition":{
                    "StringEquals":{
                      "aws:RequestTag/for-use-with-amazon-emr-managed-policies":"true",
                      "ec2:CreateAction":"CreateSecurityGroup"
                    }
                  }
                },
                {
                  "Sid":"AllowEC2ENICreationWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateNetworkInterface"
                  ],
                  "Resource":[
                    "arn:aws:ec2:*:*:network-interface/*"
                  ],
                  "Condition":{
                    "StringEquals":{
                      "aws:RequestTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Sid":"AllowEC2ENICreationInSubnetAndSecurityGroupWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateNetworkInterface"
                  ],
                  "Resource":[
                    "arn:aws:ec2:*:*:subnet/*",
                    "arn:aws:ec2:*:*:security-group/*"
                  ],
                  "Condition":{
                    "StringEquals":{
                      "aws:ResourceTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Sid":"AllowAddingTagsDuringEC2ENICreation",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateTags"
                  ],
                  "Resource":"arn:aws:ec2:*:*:network-interface/*",
                  "Condition":{
                    "StringEquals":{
                      "ec2:CreateAction":"CreateNetworkInterface"
                    }
                  }
                },
                {
                  "Sid":"AllowEC2ReadOnlyActions",
                  "Effect":"Allow",
                  "Action":[
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeTags",
                    "ec2:DescribeInstances",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeVpcs"
                  ],
                  "Resource":"*"
                },
                {
                  "Sid":"AllowSecretsManagerReadOnlyActionsWithEMRTags",
                  "Effect":"Allow",
                  "Action":[
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource":"arn:aws:secretsmanager:*:*:secret:*",
                  "Condition":{
                    "StringEquals":{
                      "aws:ResourceTag/for-use-with-amazon-emr-managed-policies":"true"
                    }
                  }
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:GetEncryptionConfiguration",
                    "s3:ListBucket",
                    "s3:DeleteObject"
                  ],
                  "Resource":"arn:aws:s3:::*"
                }
              ]
            }
          }
        ],
        "RoleName":"EMRDevExp-StudioServiceRole"
      }
    },
    "StudioIntermediateUserSessionPolicy":{
      "Type":"AWS::IAM::ManagedPolicy",
      "Properties":{
        "ManagedPolicyName":"EMRDevExp-StudioIntermediateUserSessionPolicy",
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Action":[
                "elasticmapreduce:CreateEditor",
                "elasticmapreduce:DescribeEditor",
                "elasticmapreduce:ListEditors",
                "elasticmapreduce:StartEditor",
                "elasticmapreduce:StopEditor",
                "elasticmapreduce:DeleteEditor",
                "elasticmapreduce:OpenEditorInConsole",
                "elasticmapreduce:AttachEditor",
                "elasticmapreduce:DetachEditor",
                "elasticmapreduce:CreateRepository",
                "elasticmapreduce:DescribeRepository",
                "elasticmapreduce:DeleteRepository",
                "elasticmapreduce:ListRepositories",
                "elasticmapreduce:LinkRepository",
                "elasticmapreduce:UnlinkRepository",
                "elasticmapreduce:DescribeCluster",
                "elasticmapreduce:ListInstanceGroups",
                "elasticmapreduce:ListBootstrapActions",
                "elasticmapreduce:ListClusters",
                "elasticmapreduce:ListSteps",
                "elasticmapreduce:CreatePersistentAppUI",
                "elasticmapreduce:DescribePersistentAppUI",
                "elasticmapreduce:GetPersistentAppUIPresignedURL"
              ],
              "Resource":"*",
              "Effect":"Allow",
              "Sid":"AllowEMRBasicActions"
            },
            {
              "Sid":"AllowEMRContainersBasicActions",
              "Action":[
                "emr-containers:DescribeVirtualCluster",
                "emr-containers:ListVirtualClusters",
                "emr-containers:DescribeManagedEndpoint",
                "emr-containers:ListManagedEndpoints",
                "emr-containers:CreateAccessTokenForManagedEndpoint",
                "emr-containers:DescribeJobRun",
                "emr-containers:ListJobRuns"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowSecretManagerListSecrets",
              "Action":[
                "secretsmanager:ListSecrets",
                "secretsmanager:CreateSecret",
                "secretsmanager:TagResource"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowSecretCreationWithEMRTagsAndEMRStudioPrefix",
              "Effect":"Allow",
              "Action":"secretsmanager:CreateSecret",
              "Resource":"arn:aws:secretsmanager:*:*:secret:emr-studio-*",
              "Condition":{
                "StringEquals":{
                  "aws:RequestTag/for-use-with-amazon-emr-managed-policies":"true"
                }
              }
            },
            {
              "Sid":"AllowAddingTagsOnSecretsWithEMRStudioPrefix",
              "Effect":"Allow",
              "Action":"secretsmanager:TagResource",
              "Resource":"arn:aws:secretsmanager:*:*:secret:emr-studio-*"
            },
            {
              "Sid":"AllowClusterTemplateRelatedIntermediateActions",
              "Action":[
                "servicecatalog:DescribeProduct",
                "servicecatalog:DescribeProductView",
                "servicecatalog:DescribeProvisioningParameters",
                "servicecatalog:ProvisionProduct",
                "servicecatalog:SearchProducts",
                "servicecatalog:UpdateProvisionedProduct",
                "servicecatalog:ListProvisioningArtifacts",
                "servicecatalog:ListLaunchPaths",
                "servicecatalog:DescribeRecord",
                "cloudformation:DescribeStackResources"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowPassingServiceRoleForWorkspaceCreation",
              "Action":"iam:PassRole",
              "Resource":[
                {
                  "Fn::GetAtt":[
                    "EMRClusterServiceRole",
                    "Arn"
                  ]
                }
              ],
              "Effect":"Allow",
              "Sid":"PassRolePermission"
            },
            {
              "Action":[
                "s3:*"
              ],
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref":"EMRDevExpBucket"
                      },
                      "/"
                    ]
                  ]
                }
              ],
              "Effect":"Allow",
              "Sid":"S3ListPermission"
            },
            {
              "Action":[
                "s3:GetObject"
              ],
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref":"EMRDevExpBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Effect":"Allow"
            },
            {
              "Effect":"Allow",
              "Action":"s3:ListAllMyBuckets",
              "Resource":"*"
            }
          ]
        }
      }
    },
    "StudioAdvanceUserSessionPolicy":{
      "Type":"AWS::IAM::ManagedPolicy",
      "Properties":{
        "ManagedPolicyName":"EMRDevExp-StudioAdvanceUserSessionPolicy",
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Action":[
                "elasticmapreduce:CreateEditor",
                "elasticmapreduce:DescribeEditor",
                "elasticmapreduce:ListEditors",
                "elasticmapreduce:StartEditor",
                "elasticmapreduce:StopEditor",
                "elasticmapreduce:DeleteEditor",
                "elasticmapreduce:OpenEditorInConsole",
                "elasticmapreduce:AttachEditor",
                "elasticmapreduce:DetachEditor",
                "elasticmapreduce:CreateRepository",
                "elasticmapreduce:DescribeRepository",
                "elasticmapreduce:DeleteRepository",
                "elasticmapreduce:ListRepositories",
                "elasticmapreduce:LinkRepository",
                "elasticmapreduce:UnlinkRepository",
                "elasticmapreduce:DescribeCluster",
                "elasticmapreduce:ListInstanceGroups",
                "elasticmapreduce:ListBootstrapActions",
                "elasticmapreduce:ListClusters",
                "elasticmapreduce:ListSteps",
                "elasticmapreduce:CreatePersistentAppUI",
                "elasticmapreduce:DescribePersistentAppUI",
                "elasticmapreduce:GetPersistentAppUIPresignedURL"
              ],
              "Resource":"*",
              "Effect":"Allow",
              "Sid":"AllowEMRBasicActions"
            },
            {
              "Sid":"AllowEMRContainersBasicActions",
              "Action":[
                "emr-containers:DescribeVirtualCluster",
                "emr-containers:ListVirtualClusters",
                "emr-containers:DescribeManagedEndpoint",
                "emr-containers:ListManagedEndpoints",
                "emr-containers:CreateAccessTokenForManagedEndpoint",
                "emr-containers:DescribeJobRun",
                "emr-containers:ListJobRuns"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowSecretManagerListSecrets",
              "Action":[
                "secretsmanager:ListSecrets",
                "secretsmanager:CreateSecret",
                "secretsmanager:TagResource"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowSecretCreationWithEMRTagsAndEMRStudioPrefix",
              "Effect":"Allow",
              "Action":"secretsmanager:CreateSecret",
              "Resource":"arn:aws:secretsmanager:*:*:secret:emr-studio-*",
              "Condition":{
                "StringEquals":{
                  "aws:RequestTag/for-use-with-amazon-emr-managed-policies":"true"
                }
              }
            },
            {
              "Sid":"AllowAddingTagsOnSecretsWithEMRStudioPrefix",
              "Effect":"Allow",
              "Action":"secretsmanager:TagResource",
              "Resource":"arn:aws:secretsmanager:*:*:secret:emr-studio-*"
            },
            {
              "Sid":"AllowClusterTemplateRelatedIntermediateActions",
              "Action":[
                "servicecatalog:DescribeProduct",
                "servicecatalog:DescribeProductView",
                "servicecatalog:DescribeProvisioningParameters",
                "servicecatalog:ProvisionProduct",
                "servicecatalog:SearchProducts",
                "servicecatalog:UpdateProvisionedProduct",
                "servicecatalog:ListProvisioningArtifacts",
                "servicecatalog:ListLaunchPaths",
                "servicecatalog:DescribeRecord",
                "cloudformation:DescribeStackResources"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowEMRCreateClusterAdvancedActions",
              "Action":[
                "elasticmapreduce:RunJobFlow"
              ],
              "Resource":"*",
              "Effect":"Allow"
            },
            {
              "Sid":"AllowPassingServiceRoleForWorkspaceCreation",
              "Action":"iam:PassRole",
              "Resource":[
                {
                  "Fn::GetAtt":[
                    "EMRClusterServiceRole",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt":[
                    "EMREC2RestrictedRole",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt":[
                    "EMRStudioServiceRole",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref":"AWS::AccountId"
                      },
                      ":role/EMR_DefaultRole"
                    ]
                  ]
                },
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref":"AWS::AccountId"
                      },
                      ":role/EMR_EC2_DefaultRole"
                    ]
                  ]
                }
              ],
              "Effect":"Allow",
              "Sid":"PassRolePermission"
            },
            {
              "Action":[
                "s3:*"
              ],
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref":"EMRDevExpBucket"
                      },
                      "/"
                    ]
                  ]
                }
              ],
              "Effect":"Allow",
              "Sid":"S3ListPermission"
            },
            {
              "Action":[
                "s3:GetObject"
              ],
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref":"EMRDevExpBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Effect":"Allow"
            },
            {
              "Effect":"Allow",
              "Action":"s3:ListAllMyBuckets",
              "Resource":"*"
            }
          ]
        }
      }
    },
    "AmazonEMROnEKSPolicy":{
      "Type":"AWS::IAM::ManagedPolicy",
      "Properties":{
        "ManagedPolicyName":"EMRDevExp-AmazonEMROnEKSPolicy",
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Action":[
                "elasticmapreduce:CreateEditor",
                "elasticmapreduce:DescribeEditor",
                "elasticmapreduce:ListEditors",
                "elasticmapreduce:StartEditor",
                "elasticmapreduce:StopEditor",
                "elasticmapreduce:DeleteEditor",
                "elasticmapreduce:OpenEditorInConsole",
                "elasticmapreduce:AttachEditor",
                "elasticmapreduce:DetachEditor",
                "elasticmapreduce:CreateRepository",
                "elasticmapreduce:DescribeRepository",
                "elasticmapreduce:DeleteRepository",
                "elasticmapreduce:ListRepositories",
                "elasticmapreduce:LinkRepository",
                "elasticmapreduce:UnlinkRepository",
                "elasticmapreduce:DescribeCluster",
                "elasticmapreduce:ListInstanceGroups",
                "elasticmapreduce:ListBootstrapActions",
                "elasticmapreduce:ListClusters",
                "elasticmapreduce:ListSteps",
                "elasticmapreduce:CreatePersistentAppUI",
                "elasticmapreduce:DescribePersistentAppUI",
                "elasticmapreduce:GetPersistentAppUIPresignedURL",
                "secretsmanager:CreateSecret",
                "secretsmanager:ListSecrets",
                "emr-containers:DescribeVirtualCluster",
                "emr-containers:ListVirtualClusters",
                "emr-containers:DescribeManagedEndpoint",
                "emr-containers:ListManagedEndpoints",
                "emr-containers:CreateAccessTokenForManagedEndpoint",
                "emr-containers:DescribeJobRun",
                "emr-containers:ListJobRuns"
              ],
              "Resource":"*",
              "Effect":"Allow",
              "Sid":"AllowBasicActions"
            },
            {
              "Action":[
                "servicecatalog:DescribeProduct",
                "servicecatalog:DescribeProductView",
                "servicecatalog:DescribeProvisioningParameters",
                "servicecatalog:ProvisionProduct",
                "servicecatalog:SearchProducts",
                "servicecatalog:UpdateProvisionedProduct",
                "servicecatalog:ListProvisioningArtifacts",
                "servicecatalog:DescribeRecord",
                "cloudformation:DescribeStackResources"
              ],
              "Resource":"*",
              "Effect":"Allow",
              "Sid":"AllowIntermediateActions"
            },
            {
              "Action":[
                "elasticmapreduce:RunJobFlow"
              ],
              "Resource":"*",
              "Effect":"Allow",
              "Sid":"AllowAdvancedActions"
            },
            {
              "Effect":"Allow",
              "Action":[
                "iam:CreateServiceLinkedRole"
              ],
              "Resource":"*",
              "Condition":{
                "StringLike":{
                  "iam:AWSServiceName":"emr-containers.amazonaws.com"
                }
              }
            },
            {
              "Effect":"Allow",
              "Action":[
                "emr-containers:CreateVirtualCluster",
                "emr-containers:ListVirtualClusters",
                "emr-containers:DescribeVirtualCluster",
                "emr-containers:DeleteVirtualCluster"
              ],
              "Resource":"*"
            },
            {
              "Effect":"Allow",
              "Action":[
                "emr-containers:StartJobRun",
                "emr-containers:ListJobRuns",
                "emr-containers:DescribeJobRun",
                "emr-containers:CancelJobRun"
              ],
              "Resource":"*"
            },
            {
              "Effect":"Allow",
              "Action":[
                "emr-containers:DescribeJobRun",
                "elasticmapreduce:CreatePersistentAppUI",
                "elasticmapreduce:DescribePersistentAppUI",
                "elasticmapreduce:GetPersistentAppUIPresignedURL"
              ],
              "Resource":"*"
            },
            {
              "Effect":"Allow",
              "Action":[
                "s3:GetObject",
                "s3:ListBucket"
              ],
              "Resource":"*"
            },
            {
              "Effect":"Allow",
              "Action":[
                "logs:Get*",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
              ],
              "Resource":"*"
            }
          ]
        }
      }
    },
    "EMRStudioUserRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-StudioUserRole",
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "elasticmapreduce.amazonaws.com"
                ]
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess",
          {
            "Ref":"StudioAdvanceUserSessionPolicy"
          },
          {
            "Ref":"StudioIntermediateUserSessionPolicy"
          }
        ]
      }
    },
    "EMRSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupName":"EMRDevExp-EMR-SG",
        "GroupDescription":"Security Group for EMRDevExp-EMR-SecGroup",
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"-1",
            "CidrIp":{
              "Fn::FindInMap":[
                "SubnetConfig",
                "VPC",
                "CIDR"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-EMR-SG"
          }
        ]
      }
    },
    "EMRServiceAccessSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupName":"EMRDevExp-EMR-ServiceAccess-SG",
        "GroupDescription":"Security Group for EMRDevExp-EMR-SecGroup",
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":9443,
            "ToPort":9443,
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "EMRSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":8443,
            "ToPort":8443,
            "DestinationSecurityGroupId":{
              "Fn::GetAtt":[
                "EMRSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-EMR-ServiceAccess-SG"
          }
        ]
      }
    },
    "WorkspaceSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupName":"EMRDevExp-Workspace-SG",
        "GroupDescription":"Security group for EMR Studio Workspace",
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":443,
            "ToPort":443,
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":18888,
            "ToPort":18888,
            "DestinationSecurityGroupId":{
              "Fn::GetAtt":[
                "ClusterEndpointSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-Workspace-SG"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "ClusterEndpointSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupName":"EMRDevExp-Cluster-Endpoint-SG",
        "GroupDescription":"Security group for EMR Studio Cluster-Endpoint",
        "VpcId":{
          "Ref":"EMRDevExpVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":0,
            "ToPort":65535,
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "EMRSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":0,
            "ToPort":65535,
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "EMRServiceAccessSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"EMRDevExp-Cluster-Endpoint-SG"
          },
          {
            "Key":"for-use-with-amazon-emr-managed-policies",
            "Value":"true"
          }
        ]
      }
    },
    "ClusterEndpointSecurityGroupIngress":{
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "GroupId":{
          "Ref":"ClusterEndpointSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":18888,
        "ToPort":18888,
        "SourceSecurityGroupId":{
          "Fn::GetAtt":[
            "WorkspaceSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "LambdaEMRTemplateCreator":{
      "Type":"AWS::Lambda::Function",
      "Properties":{
        "Role":{
          "Fn::GetAtt":[
            "LambdaEMRTemplateCreatorRole",
            "Arn"
          ]
        },
        "Description":"Lambda Function to create custom EMR templates",
        "Runtime":"python3.6",
        "Timeout":60,
        "Handler":"index.handler",
        "Code":{
          "ZipFile":"import cfnresponse\nimport boto3\nimport urllib.request\n\nCLUSTER_TEMPLATE_URL = 'https://aws-data-analytics-workshops.s3.amazonaws.com/emr-dev-exp-workshop/template/emr-cluster-template.yaml'\nSAMPLE_DATA = 'https://aws-data-analytics-workshops.s3.amazonaws.com/emr-dev-exp-workshop/input/tripdata.csv'\nCLIENT = boto3.client('s3')\nTARGET_TEMPLATE_KEY1 = 'emr-templates/emr-5.33.0.yaml'\nTARGET_TEMPLATE_KEY2 = 'emr-templates/emr-6.2.0.yaml'\nTARGET_SAMPLE_DATA_KEY = 'input/tripdata.csv'\n\ndef fetch_template_contents(url):\n    f = urllib.request.urlopen(url)\n    return f.read().decode('utf-8')\n\ndef write_to_s3(bucket, key, data):\n    CLIENT.put_object(Body=data, Bucket=bucket, Key=key)\n\ndef s3_http_uri(bucket, key):\n    return \"https://s3.amazonaws.com/{}/{}\".format(bucket, key)\n\ndef handler(event, context):\n    # Fetch the provide VPC and Subnet IDs\n    subnet_id1 = event['ResourceProperties']['subnet_id1']\n    subnet_id2 = event['ResourceProperties']['subnet_id2']\n    emr_secgroup = event['ResourceProperties']['emr_secgroup']\n    serviceaccess_sg = event['ResourceProperties']['service_access_secgroup']\n    destination_bucket = event['ResourceProperties']['destination_bucket']\n\n    # Read the default template, replace the params, and write it back out to S3\n\n    template1 = fetch_template_contents(CLUSTER_TEMPLATE_URL)\n    template1 = template1.replace(\"subnet-XXXX\", subnet_id1)\n    template1 = template1.replace(\"emr-release\", \"emr-5.33.0\")\n    template1 = template1.replace(\"subnet-YYYY\", subnet_id2)\n    template1 = template1.replace(\"sec-group-id\", emr_secgroup)\n    template1 = template1.replace(\"service-access-id\", serviceaccess_sg)\n\n    write_to_s3(destination_bucket, TARGET_TEMPLATE_KEY1, template1)\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {\"template_uri\": s3_http_uri(destination_bucket, TARGET_TEMPLATE_KEY1)}, \"CustomResourcePhysicalID\")\n\n    template2 = fetch_template_contents(CLUSTER_TEMPLATE_URL)\n    template2 = template2.replace(\"subnet-XXXX\", subnet_id1)\n    template2 = template2.replace(\"emr-release\", \"emr-6.2.0\")\n    template2 = template2.replace(\"subnet-YYYY\", subnet_id2)\n    template2 = template2.replace(\"sec-group-id\", emr_secgroup)\n    template2 = template2.replace(\"service-access-id\", serviceaccess_sg)\n\n    write_to_s3(destination_bucket, TARGET_TEMPLATE_KEY2, template2)\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {\"template_uri\": s3_http_uri(destination_bucket, TARGET_TEMPLATE_KEY2)}, \"CustomResourcePhysicalID\")\n\n    sampleData = fetch_template_contents(SAMPLE_DATA)\n    write_to_s3(destination_bucket, TARGET_SAMPLE_DATA_KEY, sampleData)\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {\"template_uri\": s3_http_uri(destination_bucket, TARGET_SAMPLE_DATA_KEY)}, \"CustomResourcePhysicalID\")"
        }
      }
    },
    "CreateEMRTemplateResource":{
      "Type":"Custom::LambdaEMRTemplateCreator",
      "Properties":{
        "subnet_id1":{
          "Ref":"PrivateSubnet1"
        },
        "subnet_id2":{
          "Ref":"PrivateSubnet2"
        },
        "destination_bucket":{
          "Ref":"EMRDevExpBucket"
        },
        "emr_secgroup":{
          "Ref":"EMRSecurityGroup"
        },
        "ServiceToken":{
          "Fn::GetAtt":[
            "LambdaEMRTemplateCreator",
            "Arn"
          ]
        },
        "service_access_secgroup":{
          "Ref":"EMRServiceAccessSecurityGroup"
        }
      }
    },
    "LambdaEMRTemplateCreatorRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "RoleName":"EMRDevExp-LambdaEMRTemplateCreatorRole",
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Action":[
                "sts:AssumeRole"
              ],
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version":"2012-10-17"
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"write-s3-policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:PutObject"
                  ],
                  "Resource":{
                    "Fn::Join":[
                      "/",
                      [
                        {
                          "Fn::GetAtt":[
                            "EMRDevExpBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName":"lambda-logs",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource":[
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "Cloud9Workspace":{
      "Type":"AWS::Cloud9::EnvironmentEC2",
      "Properties":{
        "Name":"EMRDevExp-Cloud9",
        "InstanceType":"t2.micro",
        "Description":"Cloud9 workspace for EMRDevExp Workshop",
        "OwnerArn":{
          "Fn::GetAtt":[
            "EMRAdminUser",
            "Arn"
          ]
        },
        "SubnetId":{
          "Ref":"PublicSubnet1"
        }
      }
    },

    "TestUserPassword":{
      "Type":"AWS::SecretsManager::Secret",
      "Properties":{
        "Description":"Secret password for the test users",
        "Name":{
          "Fn::Sub":"${AWS::StackName}-test-user-credentials"
        },
        "GenerateSecretString":{
          "SecretStringTemplate":"{\"username\":\"emr-admin\"}",
          "GenerateStringKey":"password",
          "PasswordLength":16,
          "ExcludeCharacters":"\"@/\\"
        }
      }
    },
    "NotebookExecutionLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description": "Role for lambda functions related to studio notebook",
        "RoleName": "StudioNotebookLambdaRole",
        "Policies": [
          {
            "PolicyName": "NotebookExecutionsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticmapreduce:StartNotebookExecution"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:notebook-execution/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:editor/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:cluster/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticmapreduce:DescribeNotebookExecution"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:notebook-execution/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Get*",
                    "s3:List*",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"EMRDevExpBucket"
                          },
                          "/"
                        ]
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"EMRDevExpBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/EMR_Notebooks_DefaultRole"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaStudioExecution": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Sub": "import sys\nfrom pip._internal import main\n\nmain(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])\nmain(['install', '-I', '-q', 'botocore', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])\nsys.path.insert(0,'/tmp/')\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\ndef lambda_handler(event, context):\n    cluster_id=event['cluster_id']\n    notebook_id=event['notebook_id']\n    notebook_relative_path=event['notebook_path']\n    params=\"{\\\"bucketPath\\\":\\\"\"+event['notebook_params'] + \"\\\"}\"\n    emr = boto3.client('emr')\n    start_resp = emr.start_notebook_execution(\n        EditorId=notebook_id,\n        RelativePath=notebook_relative_path,\n        NotebookParams=params,\n        ExecutionEngine={'Id': cluster_id},\n        ServiceRole='EMR_Notebooks_DefaultRole'\n    )\n    return start_resp['NotebookExecutionId']\n"
          }
        },
        "Description": "Lambda function to execute a notebook",
        "Handler": "index.lambda_handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "NotebookExecutionLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7"
      }
    },
    "LambdaStudioStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Sub": "import sys\nfrom pip._internal import main\n\nmain(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])\nmain(['install', '-I', '-q', 'botocore', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])\nsys.path.insert(0,'/tmp/')\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\ndef lambda_handler(event, context):\n    execution_id=event['exId']\n    emr = boto3.client('emr')\n    describe_response = emr.describe_notebook_execution(NotebookExecutionId=execution_id)\n    status = describe_response['NotebookExecution']['Status']\n    if 'FINISHED' == status:\n        return {'execution_id': execution_id, 'status': status,'output_location': describe_response['NotebookExecution']['OutputNotebookURI']}\n    else:\n        return {'execution_id': execution_id, 'status': status}\n"
          }
        },
        "Description": "Lambda function to describe notebook execution",
        "Handler": "index.lambda_handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "NotebookExecutionLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7"
      }
    },
    "StepFunctionsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "StepFunctionsRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "InvokeLambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "LambdaStudioExecution",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "LambdaStudioStatus",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "StepFunctionsStateMachineForStudio": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Sub": "StudioWorkspacePipelineStateMachine"
        },
        "DefinitionString": {
          "Fn::Sub": "{\"Comment\":\"Building Data Pipeline using EMR Studio Notebook and Step Functions\",\"StartAt\":\"Execute MilesPerRate Notebook\",\"States\":{\"Execute MilesPerRate Notebook\":{\"Type\":\"Task\",\"Resource\":\"${LambdaStudioExecution.Arn}\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.SdkClientException\",\"Lambda.AWSLambdaException\"],\"IntervalSeconds\":2,\"MaxAttempts\":3,\"BackoffRate\":2}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"Next\":\"MilesPerRate Job Failed\",\"ResultPath\":\"$.error\"}],\"InputPath\":\"$\",\"Parameters\":{\"cluster_id.$\":\"$.cluster_id\",\"notebook_id.$\":\"$.notebook_id\",\"notebook_params.$\":\"$.notebook_params\",\"notebook_path.$\":\"$.mprArgs.notebook_path\"},\"Next\":\"Check MilesPerRate Job Status\",\"ResultPath\":\"$.exId\"},\"Check MilesPerRate Job Status\":{\"Type\":\"Task\",\"Resource\":\"${LambdaStudioStatus.Arn}\",\"ResultPath\":\"$.MPRStatus\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.SdkClientException\",\"Lambda.AWSLambdaException\"],\"IntervalSeconds\":2,\"MaxAttempts\":3,\"BackoffRate\":2}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"Next\":\"MilesPerRate Job Failed\",\"ResultPath\":\"$.error\"}],\"Next\":\"Is MilesPerRate Job complete?\"},\"Is MilesPerRate Job complete?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.MPRStatus.status\",\"StringEquals\":\"FINISHED\",\"Next\":\"Execute RateCodeStatus Notebook\"},{\"Or\":[{\"Variable\":\"$.MPRStatus.status\",\"StringEquals\":\"FAILING\"},{\"Variable\":\"$.MPRStatus.status\",\"StringEquals\":\"FAILED\"}],\"Next\":\"MilesPerRate Job Failed\"}],\"Default\":\"Wait for MPR Job Execution\"},\"Wait for MPR Job Execution\":{\"Type\":\"Wait\",\"Seconds\":10,\"Next\":\"Check MilesPerRate Job Status\"},\"MilesPerRate Job Failed\":{\"Type\":\"Fail\",\"Error\":\"MilesPerRate job is failed\",\"Cause\":\"MilesPerRate job did not complete successfully. Please check logs.\"},\"Execute RateCodeStatus Notebook\":{\"Type\":\"Task\",\"Resource\":\"${LambdaStudioExecution.Arn}\",\"ResultPath\":\"$.exId\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.SdkClientException\",\"Lambda.AWSLambdaException\"],\"IntervalSeconds\":2,\"MaxAttempts\":3,\"BackoffRate\":2}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"Next\":\"RateCodeStatus Job Failed\",\"ResultPath\":\"$.error\"}],\"InputPath\":\"$\",\"Parameters\":{\"cluster_id.$\":\"$.cluster_id\",\"notebook_id.$\":\"$.notebook_id\",\"notebook_params.$\":\"$.notebook_params\",\"notebook_path.$\":\"$.rcsArgs.notebook_path\"},\"Next\":\"Check RateCodeStatus Job Status\"},\"Check RateCodeStatus Job Status\":{\"Type\":\"Task\",\"Resource\":\"${LambdaStudioStatus.Arn}\",\"ResultPath\":\"$.RCSStatus\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.SdkClientException\",\"Lambda.AWSLambdaException\"],\"IntervalSeconds\":2,\"MaxAttempts\":3,\"BackoffRate\":2}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"Next\":\"RateCodeStatus Job Failed\",\"ResultPath\":\"$.error\"}],\"Next\":\"Is RateCodeStatus Job complete?\"},\"Is RateCodeStatus Job complete?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.RCSStatus.status\",\"StringEquals\":\"FINISHED\",\"Next\":\"All Notebooks Executed Successfully\"},{\"Or\":[{\"Variable\":\"$.RCSStatus.status\",\"StringEquals\":\"FAILING\"},{\"Variable\":\"$.RCSStatus.status\",\"StringEquals\":\"FAILED\"}],\"Next\":\"RateCodeStatus Job Failed\"}],\"Default\":\"Wait for RCS Job Execution\"},\"Wait for RCS Job Execution\":{\"Type\":\"Wait\",\"Seconds\":10,\"Next\":\"Check RateCodeStatus Job Status\"},\"RateCodeStatus Job Failed\":{\"Type\":\"Fail\",\"Error\":\"RateCodeStatus job is failed\",\"Cause\":\"RateCodeStatus job did not complete successfully. Please check logs.\"},\"All Notebooks Executed Successfully\":{\"Type\":\"Succeed\"}}}"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StepFunctionsRole",
            "Arn"
          ]
        }
      }
    },
    "EMRDefaultRole":{
      "Type":"AWS::IAM::Role",
      "Condition": "ShouldCreateEMRRoles",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2008-10-17",
          "Statement":[
            {
              "Sid":"",
              "Effect":"Allow",
              "Principal":{
                "Service":"elasticmapreduce.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
        ],
        "RoleName":"EMR_DefaultRole"
      }
    },
    "EMREC2DefaultRole":{
      "Type":"AWS::IAM::Role",
      "Condition": "ShouldCreateEMRRoles",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":"ec2.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
        ],
        "RoleName":"EMR_EC2_DefaultRole"
      }
    },
    "EMRNotebooksDefaultRole":{
      "Type":"AWS::IAM::Role",
      "Condition": "ShouldCreateEMRRoles",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":"elasticmapreduce.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns":[
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceEditorsRole",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ],
        "RoleName":"EMR_Notebooks_DefaultRole"
      }
    },
    "EMREC2DefaultRoleInstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Condition": "ShouldCreateEMRRoles",
      "Properties":{
        "InstanceProfileName":"EMR_EC2_DefaultRole",
        "Path":"/",
        "Roles":[
          {
            "Ref":"EMREC2DefaultRole"
          }
        ]
      }
    },
    "EMRCluster":{
      "Type":"AWS::EMR::Cluster",
      "Condition": "ShouldCreateEMRCluster",
      "DependsOn":[
        "EMRDefaultRole",
        "EMREC2DefaultRoleInstanceProfile",
        "EMREC2DefaultRole"
      ],
      "Properties":{
        "Instances":{
          "MasterInstanceGroup":{
            "InstanceCount":1,
            "InstanceType":"m4.2xlarge",
            "Market":"ON_DEMAND",
            "Name":"cfnMaster"
          },
          "CoreInstanceGroup":{
            "InstanceCount":2,
            "InstanceType":"m4.2xlarge",
            "Market":"ON_DEMAND",
            "Name":"cfnCore"
          },
          "Ec2SubnetId":{
            "Ref":"PrivateSubnet1"
          }
        },
        "Name":"emr_on_ec2_cluster",
        "Applications":[
          {
            "Name":"Spark"
          },
          {
            "Name":"Livy"
          },
          {
            "Name":"Hive"
          },
          {
            "Name":"JupyterEnterpriseGateway"
          },
          {
            "Name": "Presto"
          }
        ],
        "Configurations":[
          {
            "Classification":"spark-hive-site",
            "ConfigurationProperties":{
              "hive.metastore.client.factory.class" : "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactor"

            }
          },
          {
            "Classification":"presto-connector-hive",
            "ConfigurationProperties":{
              "hive.metastore":"glue"
            }
          }
        ],
        "JobFlowRole":{
          "Ref":"EMREC2DefaultRole"
        },

        "ServiceRole":{
          "Ref":"EMRDefaultRole"
        },
        "ReleaseLabel":"emr-6.4.0",

        "VisibleToAllUsers":true,
        "LogUri":{
          "Fn::Join":[
            "",
            [
              "s3://emr-dev-exp-",
              {
                "Ref":"AWS::AccountId"
              },
              "/elasticmapreduce/"
            ]
          ]
        }

      }
    },
    "EMRStudioRepo": {
      "Type": "AWS::CodeCommit::Repository",
      "Properties": {
        "RepositoryName": "EMRStudioDemoRepo",
        "RepositoryDescription": "This is a repository for EMR Studio Developer Exp workshop."

      }
    }



  },
  "Outputs":{
    "EMRDevExpBucket":{
      "Description":"Bucket that contains content of the workshop",
      "Value":{
        "Fn::Join":[
          "",
          [
            "s3://",
            {
              "Ref":"EMRDevExpBucket"
            }
          ]
        ]
      }
    },
    "EMRAdminUsername":{
      "Description":"Username for the EMR admin user",
      "Value":{
        "Ref":"EMRAdminUser"
      }
    },
    "VPCID":{
      "Description":"VPC Id to be used for EMR Studio",
      "Value":{
        "Ref":"EMRDevExpVPC"
      }
    },
    "PrivateSubnetID1":{
      "Description":"Private subnet #1 id",
      "Value":{
        "Ref":"PrivateSubnet1"
      }
    },
    "PrivateSubnetID2":{
      "Description":"Private subnet #2 id",
      "Value":{
        "Ref":"PrivateSubnet2"
      }
    },
    "PublicSubnetID1":{
      "Description":"Public subnet #1 id",
      "Value":{
        "Ref":"PublicSubnet1"
      }
    },
    "PublicSubnetID2":{
      "Description":"Public subnet #2 id",
      "Value":{
        "Ref":"PublicSubnet2"
      }
    },
    "EMREKSExecutionRoleARN":{
      "Description":"Execution Role ARN for EMR on EKS",
      "Value":{
        "Fn::GetAtt":[
          "EMREKSJobExecutionRole",
          "Arn"
        ]
      }
    },
    "ServiceRoleARN":{
      "Description":"Service Role ARN to be used for EMR Studio",
      "Value":{
        "Fn::GetAtt":[
          "EMRStudioServiceRole",
          "Arn"
        ]
      }
    },
    "StudioSAMLAuth0RoleARN":{
      "Description":"SAML provider Auth0 Role ARN to be used for EMR Studio",
      "Value":{
        "Fn::GetAtt":[
          "StudioSAMLRoleAuth0",
          "Arn"
        ]
      }
    },
    "UserRoleARN":{
      "Description":"User Role ARN to be used for EMR Studio",
      "Value":{
        "Fn::GetAtt":[
          "EMRStudioUserRole",
          "Arn"
        ]
      }
    },
    "WorkspaceSecGroupID":{
      "Description":"Workspace sec group id to be used for EMR Studio",
      "Value":{
        "Fn::GetAtt":[
          "WorkspaceSecurityGroup",
          "GroupId"
        ]
      }
    },
    "ClusterEndpointSecGroupId":{
      "Description":"Cluster/endpoint sec group id to be used for EMR Studio",
      "Value":{
        "Fn::GetAtt":[
          "ClusterEndpointSecurityGroup",
          "GroupId"
        ]
      }
    },
    "AdvanceUserSessionPolicyARN":{
      "Description":"Advance User Session policy ARN to be used for EMR Studio",
      "Value":{
        "Ref":"StudioAdvanceUserSessionPolicy"
      }
    },
    "IntermediateUserSessionPolicyARN":{
      "Description":"Intermediate User Session policy ARN to be used for EMR Studio",
      "Value":{
        "Ref":"StudioIntermediateUserSessionPolicy"
      }
    },
    "TestUserCredentials":{
      "Description":"AWS Secrets Manager Secret Name for workshop dev website credentials",
      "Value":{
        "Fn::Sub":"https://${AWS::Region}.console.aws.amazon.com/secretsmanager/home?region=${AWS::Region}#/secret?name=${AWS::StackName}-test-user-credentials"
      }
    },
    "ConsoleIAMLoginUrl":{
      "Description":"Console IAM Login URL for test users",
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://",
            {
              "Ref":"AWS::AccountId"
            },
            ".signin.aws.amazon.com/console"
          ]
        ]
      }
    },
    "AWSCodeCommitCloneHTTPSURL": {
      "Description": "AWS CodeCommit HTTPS URL for linking repository to Amazon EMR Studio Workspace",
      "Value": {
        "Fn::GetAtt":[
          "EMRStudioRepo",
          "CloneUrlHttp"
        ]

      }

    }
  }
}